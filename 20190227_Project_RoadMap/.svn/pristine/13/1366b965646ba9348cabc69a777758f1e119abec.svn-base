{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.lines as lines\n",
    "import matplotlib.transforms as mtransforms\n",
    "import matplotlib.text as mtext"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import random\n",
    "import matplotlib.lines as lines\n",
    "import matplotlib.patches as patches\n",
    "import matplotlib.text as text\n",
    "import matplotlib.collections as collections\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Fixing random state for reproducibility\n",
    "np.random.seed(19680801)\n",
    "\n",
    "if 0:\n",
    "    # test a line collection\n",
    "    # Not supported at present.\n",
    "    verts = []\n",
    "    for i in range(10):\n",
    "        # a random line segment in inches\n",
    "        verts.append(zip(*inch*10*np.random.rand(2, random.randint(2, 15))))\n",
    "    lc = collections.LineCollection(verts, axes=ax)\n",
    "    ax.add_collection(lc)\n",
    "\n",
    "# test a plain-ol-line\n",
    "line = lines.Line2D([0, 1.5], [0, 2.5],\n",
    "                    lw=2, color='black', axes=ax)\n",
    "ax.add_line(line)\n",
    "\n",
    "if 0:\n",
    "    # test a patch\n",
    "    # Not supported at present.\n",
    "    rect = patches.Rectangle((1*cm, 1*cm), width=5*cm, height=2*cm,\n",
    "                             alpha=0.2, axes=ax)\n",
    "    ax.add_patch(rect)\n",
    "\n",
    "\n",
    "t = text.Text(3, 2.5, 'text label', ha='left', va='bottom', axes=ax)\n",
    "ax.add_artist(t)\n",
    "\n",
    "ax.set_xlim(-1, 10)\n",
    "ax.set_ylim(-1, 10)\n",
    "# ax.xaxis.set_units(inch)\n",
    "ax.grid(False)\n",
    "ax.set_title(\"Artists with units\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Can not reset the axes.  You are probably trying to re-use an artist in more than one Axes which is not supported",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-62e282c574be>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     26\u001b[0m line = lines.Line2D([0, 1], [10, 1],\n\u001b[0;32m     27\u001b[0m                     lw=2, color='black', axes=ax)\n\u001b[1;32m---> 28\u001b[1;33m \u001b[0max2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     29\u001b[0m \u001b[1;31m#plt.plot([1,2,3,5],[2,3,5,7],color=\"y\",linestyle = \"-\")\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     30\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'off'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\zhiguol\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\axes\\_base.py\u001b[0m in \u001b[0;36madd_line\u001b[1;34m(self, line)\u001b[0m\n\u001b[0;32m   1926\u001b[0m         \u001b[0mReturns\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1927\u001b[0m         \"\"\"\n\u001b[1;32m-> 1928\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_set_artist_props\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mline\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1929\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_clip_path\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1930\u001b[0m             \u001b[0mline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_clip_path\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\zhiguol\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\axes\\_base.py\u001b[0m in \u001b[0;36m_set_artist_props\u001b[1;34m(self, a)\u001b[0m\n\u001b[0;32m    956\u001b[0m             \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransData\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    957\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 958\u001b[1;33m         \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    959\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmouseover\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    960\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmouseover_set\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\zhiguol\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\lines.py\u001b[0m in \u001b[0;36maxes\u001b[1;34m(self, ax)\u001b[0m\n\u001b[0;32m    620\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0maxes\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    621\u001b[0m         \u001b[1;31m# call the set method from the base-class property\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 622\u001b[1;33m         \u001b[0mArtist\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    623\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0max\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    624\u001b[0m             \u001b[1;31m# connect unit-related callbacks\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mc:\\users\\zhiguol\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\matplotlib\\artist.py\u001b[0m in \u001b[0;36maxes\u001b[1;34m(self, new_axes)\u001b[0m\n\u001b[0;32m    212\u001b[0m         if (new_axes is not None and self._axes is not None\n\u001b[0;32m    213\u001b[0m                 and new_axes != self._axes):\n\u001b[1;32m--> 214\u001b[1;33m             raise ValueError(\"Can not reset the axes.  You are probably \"\n\u001b[0m\u001b[0;32m    215\u001b[0m                              \u001b[1;34m\"trying to re-use an artist in more than one \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    216\u001b[0m                              \"Axes which is not supported\")\n",
      "\u001b[1;31mValueError\u001b[0m: Can not reset the axes.  You are probably trying to re-use an artist in more than one Axes which is not supported"
     ],
     "output_type": "error"
    },
    {
     "data": {
      "image/png": "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vrEAAAAJg316sBAADAfLleDeasuy9OcvEcSt16ZrzqKUQr9HJtknOnr7nr7kuS/O1G1N5I3f3lJF9edB8AAAAAAAAAwObgejU2k7vOjNdyLRgAAAAAAAAAAHMmdMRm8sjBcyf55KIaAQAAAAAAAADYn7lejb1eVR2e5KeTPGMwfc6+fO8hAAAAAAAAAMDeTOiIvVZVvSDJ6Vn+RK4/2MPtAAAAAAAAAAAw5Xo19mYHZPm/o7/X3e/Z080AAAAAAAAAADDhpCM2g+8m+VqS85L8WXf/64L7AQAAAAAAAADYr1V3L7oHAAAAAGAPq6otSbYvjbdv354tW7YssCMAAADY3Hbs2JGtW7cOp7Z2945F9bPRXK8GAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMIn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rJm5Lcad6Bo0Etl3b345LcPZNw0GX7mHJFJqcg/VqS47v7m/tY/0tJvj/J45OcvY+1L0vyj0ket481/zjJHZM8P5Or2L6WvU85AgAAAAAAAADYVK5XY91V1XdlEvo5LsmRSb6e5Pwk7x5zjNj0OrPPDLp+srtfMbKWw5LcLcmtktw4kxODLknylSSfTPKf3b2vYNJK698syWmZ/FmPTnJ5Jte5fSLJR7r78v1dGwAAAGCeXK8GAAAA8+V6NZiz7v58ks/PYanrz7RXPIVomVouT/Lu6WPuuvuCJK9bj7UBAAAAAAAAABaF69XYSk6YaX95U6oAAAAAAAAAANjmhI7YSu43eN5JPrpZhQAAAAAAAAAAbGeuV2PhVdUxSR6Z5OcH3WccyPceAgAAAAAAAAAsMqEjFlZV/Y8kT8vSJ3L94QaXAwAAAAAAAADAlOvVWGQHZemv0d/t7rdsdDEAAAAAAAAAAEw46Yit4FtJvpTkPUle3N0f2uR6AAAAAAAAAAC2teruza4BAAAAANhgVbUjya497V27dmXHjh2bWBEAAABsbbt3787OnTuHXTu7e/dm1bPeXK8GAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAAAAAACMInQEAAAAAA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\n",
      "text/plain": [
       "<Figure size 2800x2800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Support multi sub graphs.\n",
    "import  matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(10,10), dpi=280)\n",
    "#plt.figure(1)\n",
    "ax1 = plt.subplot(221) #Project Name\n",
    "t = text.Text(0, 1, 'Project 1', ha='left', va='bottom', axes=ax1)\n",
    "t1 = text.Text(0, 2, 'Project 2', ha='left', va='bottom', axes=ax1)\n",
    "t2 = text.Text(0, 3, 'Project 3', ha='left', va='bottom', axes=ax1)\n",
    "t3 = text.Text(0, 4, 'Project 4', ha='left', va='bottom', axes=ax1)\n",
    "t4 = text.Text(0, 5, 'Project 5', ha='left', va='bottom', axes=ax1)\n",
    "tlist = text.Text(0, 9, 'Project List', ha='left', va='bottom', axes=ax1)\n",
    "#plt.plot([1,2,3,4],[4,5,7,8], color=\"r\",linestyle = \"--\")\n",
    "ax1.add_artist(t)\n",
    "ax1.add_artist(t1)\n",
    "ax1.add_artist(t2)\n",
    "ax1.add_artist(t3)\n",
    "ax1.add_artist(t4)\n",
    "ax1.add_artist(tlist)\n",
    "ax1.set_xlim(0, 10)\n",
    "ax1.set_ylim(0, 10)\n",
    "# ax.xaxis.set_units(inch)\n",
    "ax1.grid(False)\n",
    "#ax1.set_title(\"Project List\")\n",
    "plt.axis('off') #Hide the axis\n",
    "ax2 = plt.subplot(222)\n",
    "line = lines.Line2D([0, 1], [10, 1],\n",
    "                    lw=2, color='black', axes=ax)\n",
    "ax2.add_line(line)\n",
    "#plt.plot([1,2,3,5],[2,3,5,7],color=\"y\",linestyle = \"-\")\n",
    "plt.axis('off')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
